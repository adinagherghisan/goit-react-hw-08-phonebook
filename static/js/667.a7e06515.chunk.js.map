{"version":3,"file":"static/js/667.a7e06515.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contacts/Contacts.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","components/Form/Form.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import { deleteContact } from '../../redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const Contacts = ({ contactItem }) => {\n  const dispatch = useDispatch();\n  const del = () => {\n    dispatch(deleteContact(contactItem.id));\n  };\n\n  return (\n    <li id={contactItem.id}>\n      <span>{contactItem.name}</span>\n      <span>{contactItem.number}</span>\n      <button type=\"button\" onClick={del}>\n        Delete\n      </button>\n    </li>\n  );\n};","import { selectContacts, selectFilter } from '../../redux/contacts/selectors';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = contacts.filter(el => {\n    return el.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <>\n      <ul>\n        {filteredContacts.map(contact => (\n          <Contacts contactItem={contact} key={contact.id} />\n        ))}\n      </ul>\n    </>\n  );\n};","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterReducer } from '../../redux/contacts/filterSlice';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const handleChange = e => {\n    dispatch(filterReducer(e.target.value));\n  };\n  return (\n    <>\n      <label>Find contact by name</label>\n      <input\n        onChange={handleChange}\n        value={filter}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </>\n  );\n};\nFilter.propTypes = {\n  filter: PropTypes.func,\n};","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","import { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handelInputChange = evt => {\n    const { name, value } = evt.target;\n\n    if (name === 'name') setName(value);\n    if (name === 'number') setNumber(value);\n  };\n\n  const onSubmitForm = evt => {\n    evt.preventDefault();\n    if (contacts.some(el => el.name.toLowerCase() === name.toLowerCase())) {\n      return alert(`We already have ${name}`);\n    }\n    dispatch(addContact({ name: name, number: number, id: nanoid() }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form onSubmit={onSubmitForm}>\n      <label id={nameInputId}>Name</label>\n      <input\n        value={name}\n        onChange={handelInputChange}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        id={nameInputId}\n      />\n      <label id={numberInputId}>Number</label>\n      <input\n        value={number}\n        onChange={handelInputChange}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        id={numberInputId}\n      />\n      <button type=\"submit\">Add contacts</button>\n    </form>\n  );\n};","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../redux/contacts/selectors';\n\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { Form } from 'components/Form/Form';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <h1>Phonebook</h1>\n        <Form />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        {contacts.length ? (\n          <>\n            <Filter />\n            <ContactList />\n          </>\n        ) : (\n          <p>You dont have any contacts yet</p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","Contacts","_ref","contactItem","dispatch","useDispatch","_jsxs","id","children","_jsx","name","number","type","onClick","deleteContact","ContactList","useSelector","filteredContacts","el","toLowerCase","includes","_Fragment","map","contact","Filter","onChange","e","filterReducer","target","value","pattern","title","required","urlAlphabet","nanoid","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","Form","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","nameInputId","numberInputId","handelInputChange","evt","_evt$target","reset","onSubmit","preventDefault","some","alert","concat","addContact","useEffect","fetchContacts"],"sourceRoot":""}